package ec.edu.espe.wargame.view;

import ec.edu.espe.wargame.model.AreaConverter.Unit;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;

/**
 *
 * @author Kevin Vaca Edison's OOP ESPE
 */
public class FrmAreaConverter1 extends javax.swing.JFrame {

    /**
     * Creates new form FrmAreaConverter1
     */
    public FrmAreaConverter1() {
        initUI();
        initUnits();
        initActions();    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initUI() {
        setTitle("Area Converter");
        setSize(400, 300);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Create panel with GridBagLayout
        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Initialize your widgets
        JTextField txtValue = new JTextField(10);
        JComboBox<Object> cmbFromUnit = new JComboBox<>();
        JComboBox<Object> cmbToUnit = new JComboBox<>();
        JLabel lblResult = new JLabel("Enter value and select units");
        lblResult.setBorder(BorderFactory.createEtchedBorder());
        lblResult.setHorizontalAlignment(SwingConstants.CENTER);
        JButton btnConvert = new JButton("Convert");
        JButton btnClear = new JButton("Clear");

        // Add components to panel
        gbc.gridx = 0; gbc.gridy = 0;
        panel.add(new JLabel("Value:"), gbc);
        
        gbc.gridx = 1;
        panel.add(txtValue, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        panel.add(new JLabel("From Unit:"), gbc);
        
        gbc.gridx = 1;
        panel.add(cmbFromUnit, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        panel.add(new JLabel("To Unit:"), gbc);
        
        gbc.gridx = 1;
        panel.add(cmbToUnit, gbc);
        
        gbc.gridx = 0; gbc.gridy = 3; gbc.gridwidth = 2;
        panel.add(btnConvert, gbc);
        
        gbc.gridx = 0; gbc.gridy = 4; 
        panel.add(btnClear, gbc);
        
        gbc.gridy = 5; gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(lblResult, gbc);

        add(panel);
    }

    private void initActions() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void initUnits() {
// Create mapping between display names and enum values
        for (Unit unit : Unit.values()) {
            String displayName = unit.toString() + " (" + unit.getSymbol() + ")";
            unitMap.put(displayName, unit);
            cmbFromUnit.addItem(displayName);
            cmbToUnit.addItem(displayName);
        }
        
        // Set default selections
        cmbFromUnit.setSelectedItem("Square Meter (mÂ²)");
        cmbToUnit.setSelectedItem("Hectare (ha)");
    }
        
    private void initActions() {
        // Convert button action
        btnConvert.addActionListener(e -> convertUnits());
        
        // Clear button action
        btnClear.addActionListener(e -> {
            txtValue.setText("");
            lblResult.setText("Enter value and select units");
            txtValue.requestFocus();
        });
        
        // Enter key in text field
        txtValue.addActionListener(e -> convertUnits());
    }
    private void convertUnits() {
        try {
            double value = Double.parseDouble(txtValue.getText());
            Unit fromUnit = unitMap.get(cmbFromUnit.getSelectedItem());
            Unit toUnit = unitMap.get(cmbToUnit.getSelectedItem());
            
            if (fromUnit == null || toUnit == null) {
                lblResult.setText("Please select units");
                return;
            }
            
            double result = AreaConverter.convert(value, fromUnit, toUnit, 4);
            lblResult.setText(String.format("%,.4f %s = %,.4f %s", 
                value, fromUnit.getSymbol(), result, toUnit.getSymbol()));
        } catch (NumberFormatException ex) {
            lblResult.setText("Invalid number format");
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new FrmAreaConverter().setVisible(true);
        });
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    
}
